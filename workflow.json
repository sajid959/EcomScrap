{
  "name": "Deal-Hydra-Collector-Prod",
  "nodes": [
    {
      "name": "Kickstart Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [150, 200],
      "parameters": {
        "triggerTimes": [{ "mode": "interval", "value": 2, "unit": "minutes" }]
      }
    },
    {
      "name": "Load Config (Vault)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [400, 200],
      "parameters": {
        "url": "={{ $env.VAULT_URL }}",
        "method": "GET",
        "responseFormat": "json",
        "options": { "timeout": 8000, "retry": 3 },
        "headers": {
          "Authorization": "Bearer {{$env.VAULT_TOKEN}}"
        }
      }
    },
    {
      "name": "Flipkart Fetch",
      "type": "n8n-nodes-base.browser",
      "typeVersion": 1,
      "position": [700, 40],
      "parameters": {
        "url": "={{ 'https://www.flipkart.com/search?q=' + ($json.keywords || 'electronics') }}",
        "actions": [
          { "action": "waitForSelector", "selector": "._1AtVbE, ._2kHMtA", "timeout": 12000 },
          {
            "action": "evaluate",
            "script": "return Array.from(document.querySelectorAll('._2kHMtA')).map(n => {\n  const title = n.querySelector('._4rR01T')?.innerText || null;\n  const price = n.querySelector('._30jeq3')?.innerText || null;\n  const mrp = n.querySelector('._3I9_wc')?.innerText || null;\n  const link = n.querySelector('a')?.href || null;\n  return { vendor: 'Flipkart', title, price, mrp, url: link, timestamp: new Date().toISOString() };\n});"
          }
        ],
        "launchOptions": { "headless": true, "args": ["--no-sandbox", "--disable-dev-shm-usage"] },
        "options": { "timeout": 20000 }
      }
    },
    {
      "name": "Amazon Fetch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [700, 200],
      "parameters": {
        "url": "https://www.amazon.in/s",
        "method": "GET",
        "responseFormat": "string",
        "queryParameters": { "k": "={{ $json.keywords || 'electronics' }}" },
        "headers": { "User-Agent": "Mozilla/5.0" },
        "options": { "timeout": 15000, "retry": 2 }
      }
    },
    {
      "name": "Myntra Fetch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [700, 360],
      "parameters": {
        "url": "https://www.myntra.com/{{ $json.keywords || 'men-tshirts' }}",
        "method": "GET",
        "responseFormat": "string",
        "headers": { "User-Agent": "Mozilla/5.0" },
        "options": { "timeout": 12000 }
      }
    },
    {
      "name": "Ajio Fetch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [700, 520],
      "parameters": {
        "url": "https://www.ajio.com/search/?text={{ $json.keywords || 'electronics' }}",
        "method": "GET",
        "responseFormat": "string",
        "headers": { "User-Agent": "Mozilla/5.0" },
        "options": { "timeout": 12000 }
      }
    },
    {
      "name": "Normalize & Extract",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1000, 200],
      "parameters": {
        "language": "JavaScript",
        "code": "const norm = s => s ? Number(String(s).replace(/[^0-9.]/g, '')) : null;\nreturn items.flatMap(i => {\n  if (typeof i.json === 'string') {\n    const prices = [...i.json.matchAll(/â‚¹\\s*([0-9,]+)/g)].slice(0,5);\n    return prices.map(m => ({ json: { vendor: 'Amazon', price: norm(m[1]), mrp: norm(m[1])*10, timestamp: new Date().toISOString() } }));\n  }\n  return [{ json: i.json }];\n});"
      }
    },
    {
      "name": "Baseline Lookup",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1300, 200],
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT median_price FROM price_baseline WHERE sku = {{ $json.sku ? '\\''+$json.sku+'\\'' : 'NULL' }} LIMIT 1;"
      },
      "credentials": { "postgres": "POSTGRES_CONN" }
    },
    {
      "name": "ML Scorer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1700, 200],
      "parameters": {
        "url": "={{ $env.ML_URL }}",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "bodyParametersJson": "{ \"title\": \"{{$json.title}}\", \"price\": {{$json.price}}, \"mrp\": {{$json.mrp}}, \"baseline\": {{$json['Baseline Lookup'].json[0]?.median_price}}, \"vendor\": \"{{$json.vendor}}\" }",
        "options": { "timeout": 8000 }
      }
    },
    {
      "name": "Anomaly Decision",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1900, 200],
      "parameters": {
        "language": "JavaScript",
        "code": "return items.map(it => {\n  const price = it.json.price;\n  const baseline = it.json['Baseline Lookup']?.json[0]?.median_price || it.json.mrp || price;\n  const discount = baseline ? 1 - (price / baseline) : 0;\n  const ml = it.json['ML Scorer']?.json?.score || 0.5;\n  const flag = discount >= 0.95 && ml >= 0.85;\n  return { json: { ...it.json, baseline, discount, ml, flag } };\n});"
      }
    },
    {
      "name": "Deduplicate (Redis)",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2100, 200],
      "parameters": {
        "operation": "set",
        "key": "={{ 'deal:' + ($json.sku || encodeURIComponent($json.url)) + ':' + Math.round($json.price || 0) }}",
        "value": "locked",
        "expirationInSeconds": 86400,
        "setIfNotExists": true
      },
      "credentials": { "redis": "REDIS_CONN" }
    },
    {
      "name": "Flag Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2250, 200],
      "parameters": {
        "conditions": { "boolean": [{ "value1": "={{ $json.flag }}", "operation": "isTrue" }] }
      }
    },
    {
      "name": "Telegram Alert",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2500, 200],
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "ðŸ”¥ Glitch Alert!\n*{{ $json.title }}*\nPrice: â‚¹{{ $json.price }} ({{ Math.round($json.discount*100) }}% off)\nConfidence: {{ Math.round($json.ml*100) }}%\n[Open Link]({{ $json.url }})",
        "optionsJson": "{ \"reply_markup\": { \"inline_keyboard\": [[ { \"text\": \"Approve\", \"callback_data\": \"approve::{{ $json.sku }}\" }, { \"text\": \"Reject\", \"callback_data\": \"reject::{{ $json.sku }}\" } ]] } }"
      },
      "credentials": { "telegramApi": "TELEGRAM_BOT" }
    },
    {
      "name": "Checkout Guard",
      "type": "n8n-nodes-base.browser",
      "typeVersion": 1,
      "position": [2800, 200],
      "parameters": {
        "url": "={{ $json.url }}",
        "actions": [
          { "action": "waitForSelector", "selector": "body", "timeout": 8000 },
          { "action": "click", "selector": "button.add-to-cart, a.add-to-cart", "timeout": 5000, "ignoreErrors": true }
        ],
        "launchOptions": { "headless": true, "args": ["--no-sandbox"] }
      }
    },
    {
      "name": "Log Deal",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [3100, 200],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO deals (sku, title, price, baseline, discount, vendor, url, created_at) VALUES ({{ $json.sku ? '\\''+$json.sku+'\\'' : 'NULL' }}, {{ $json.title ? '\\''+$json.title.replace(/'/g,\"''\")+'\\'' : 'NULL' }}, {{ $json.price }}, {{ $json.baseline || 'NULL' }}, {{ $json.discount }}, {{ $json.vendor ? '\\''+$json.vendor+'\\'' : 'NULL' }}, {{ $json.url ? '\\''+$json.url+'\\'' : 'NULL' }}, now());"
      },
      "credentials": { "postgres": "POSTGRES_CONN" }
    }
  ],
  "connections": {
    "Kickstart Cron": { "main": [[{ "node": "Load Config (Vault)", "type": "main", "index": 0 }]] },
    "Load Config (Vault)": { "main": [[
      { "node": "Flipkart Fetch", "type": "main", "index": 0 },
      { "node": "Amazon Fetch", "type": "main", "index": 0 },
      { "node": "Myntra Fetch", "type": "main", "index": 0 },
      { "node": "Ajio Fetch", "type": "main", "index": 0 }
    ]] },
    "Flipkart Fetch": { "main": [[{ "node": "Normalize & Extract", "type": "main", "index": 0 }]] },
    "Amazon Fetch": { "main": [[{ "node": "Normalize & Extract", "type": "main", "index": 0 }]] },
    "Myntra Fetch": { "main": [[{ "node": "Normalize & Extract", "type": "main", "index": 0 }]] },
    "Ajio Fetch": { "main": [[{ "node": "Normalize & Extract", "type": "main", "index": 0 }]] },
    "Normalize & Extract": { "main": [[{ "node": "Baseline Lookup", "type": "main", "index": 0 }]] },
    "Baseline Lookup": { "main": [[{ "node": "ML Scorer", "type": "main", "index": 0 }]] },
    "ML Scorer": { "main": [[{ "node": "Anomaly Decision", "type": "main", "index": 0 }]] },
    "Anomaly Decision": { "main": [[{ "node": "Deduplicate (Redis)", "type": "main", "index": 0 }]] },
    "Deduplicate (Redis)": { "main": [[{ "node": "Flag Filter", "type": "main", "index": 0 }]] },
    "Flag Filter": { "main": [[{ "node": "Telegram Alert", "type": "main", "index": 0 }]] },
    "Telegram Alert": { "main": [[{ "node": "Checkout Guard", "type": "main", "index": 0 }]] },
    "Checkout Guard": { "main": [[{ "node": "Log Deal", "type": "main", "index": 0 }]] }
  }
}